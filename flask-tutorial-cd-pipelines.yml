# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- development

stages:
- stage: Build
  displayName: Build stage
  variables:
  - template: "${{variables.System.ArtifactsDirectory}}/variables/manifest-flask.yml"
  jobs:
  - job: BuildJob
    pool: 
      vmimage: "ubuntu-latest"
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy_DEV
  displayName: 'Deploy Web App on DEV Environment'
  dependsOn: Build
  condition: succeeded()
  variables:
  - template: "${{variables.System.ArtifactsDirectory}}/variables/manifest-flask-dev.yml"
  jobs:
  - deployment: DeploymentJob
    pool: "Self-Hosted-Agent"
    environment: Development
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : ${{ parameters.webAppName }}'
            inputs:
              azureSubscription: ${{ parameters.azureConnection }}
              appName: ${{ parameters.webAppName }}
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

          - task: AzureCLI@2
            displayName: 'Configuring WebApp Startup file'
            inputs:
              azureSubscription: ${{ parameters.azureConnection }}
              scriptType: 'pscore'
              scriptLocation: 'inlineScript'
              inlineScript: |
                Write-Output: 'Configuring App Service to use a Startup File startup.txt'
                az webapp config set --resource-group $(resourceGroupName) --name ${{ parameters.webAppName }} --startup-file "startup.txt"